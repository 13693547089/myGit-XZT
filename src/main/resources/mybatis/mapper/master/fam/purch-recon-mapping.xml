<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.faujor.dao.master.fam.PurchReconMapper">
	<resultMap type="com.faujor.entity.fam.PurchRecon" id="purchRecon">
		<id property="id" column="id" />
		<result property="reconCode" column="recon_Code" />
		<result property="createDate" column="create_Date" />
		<result property="reconStatus" column="recon_Status" />
		<result property="reconStatusDesc" column="recon_Status_Desc" />
		<result property="suppNo" column="supp_No" />
		<result property="suppName" column="supp_Name" />
		<result property="startDate" column="start_Date" />
		<result property="endDate" column="end_Date" />
		<result property="plantCode" column="plant_Code" />
		<result property="plantDesc" column="plant_Desc" />
		<result property="sumAmount" column="sum_Amount" />
		<result property="createUser" column="create_User" />
		<result property="createTime" column="create_Time" />
		<result property="modifyUser" column="modify_User" />
		<result property="modifyTime" column="modify_Time" />
		<result property="creater" column="creater" />
		<result property="modifier" column="modifier" />
	</resultMap>

	<resultMap type="com.faujor.entity.fam.PurchReconMate" id="purchReconMate">
		<id property="id" column="id" />
		<result property="reconCode" column="recon_Code" />
		<result property="incomingDate" column="incoming_Date" />
		<result property="purchCode" column="purch_Code" />
		<result property="mateCode" column="mate_Code" />
		<result property="mateDesc" column="mate_Desc" />
		<result property="unitCode" column="unit_Code" />
		<result property="unitDesc" column="unit_Desc" />
		<result property="wareHouse" column="wareHouse" />
		<result property="incomingNum" column="incoming_Num" />
		<result property="taxPrice" column="tax_Price" />
		<result property="incomingPrice" column="incoming_Price" />
		<result property="incomingTotalPrice" column="incoming_Total_Price" />
		<result property="incomingCode" column="incoming_Code" />
		<result property="rowNum" column="row_Num" />
		<result property="innerDeliveryCode" column="inner_Delivery_Code" />
		<result property="orderReason" column="order_Reason" />
		<result property="discountAmount" column="discount_Amount" />
		<result property="taxCost" column="tax_Cost" />
		<result property="supportPrice" column="support_Price" />
		<result property="supportCost" column="support_Cost" />
		<result property="loan" column="loan" /> 
		<result property="suppScope" column="supp_Scope" />
		<result property="suppRange" column="supp_Range" />
		<result property="suppRangeDesc" column="supp_Range_Desc" />
		<result property="factoryPrice" column="factory_Price" />
		<result property="incomingFreight" column="incoming_Freight" />
		<result property="theirCdc" column="their_cdc" />
	</resultMap>

	<resultMap type="com.faujor.entity.fam.PurchReconDebit" id="purchReconDebit">
		<id property="id" column="id" />
		<result property="reconCode" column="recon_Code" />
		<result property="mateDesc" column="mate_Desc" />
		<result property="mateCode" column="mate_Code" />
		<result property="amount" column="amount" />
		<result property="debitReason" column="debit_Reason" />
		<result property="remark" column="remark" />
		<result property="attFile" column="att_File" />
	</resultMap>
	<resultMap type="com.faujor.entity.fam.PurchReconInvoce" id="purchReconInvoce">
		<id property="id" column="id" />
		<result property="invoceNo" column="invoce_No" />
		<result property="reconCode" column="recon_Code" />
		<result property="totalMoney" column="total_Money" />
		<result property="taxMoney" column="tax_Money" />
		<result property="noTaxMoney" column="no_tax_Money" />
		<result property="attFile" column="att_File" />
	</resultMap>
	<select id="getFinancePurchReconByPage" parameterType="Map"
		resultMap="purchRecon">
		select t3.* from
		(select t2.*,rownum rn from
		(select t1.* from
		fam_purch_recon t1 where 1=1
		<if test="suppName!=null and suppName!=''">
			and (t1.supp_no like #{suppName} or t1.supp_name like
			#{suppName} )
		</if>
		<if test="reconCode!=null and reconCode!=''">
			and t1.recon_code like #{reconCode}
		</if>
		<if test="status!=null and status!=''">
			and t1.recon_status = #{status}
		</if>
		<if test="startDate!=null">
			and t1.create_date &gt;= #{startDate}
		</if>
		<if test="endDate!=null">
			and t1.create_date &lt;= #{endDate}
		</if>
		<if test="userNames!=null">
			and t1.create_user in 
			<foreach collection="userNames" open="(" close=")" item="item" separator=",">
				#{item}
			</foreach>
		</if>
		order by t1.create_time desc) t2
		where
		rownum &lt;= #{page.to}) t3
		where t3.rn &gt; #{page.from}
	</select>

	<select id="getFinancePurchReconCount" parameterType="Map"
		resultType="Integer">
		select count(1) from fam_purch_recon t1 where 1=1
		<if test="suppName!=null and suppName!=''">
			and (t1.supp_no like #{suppName} or t1.supp_name like
			#{suppName} )
		</if>
		<if test="reconCode!=null and reconCode!=''">
			and t1.recon_code like #{reconCode}
		</if>
		<if test="status!=null and status!=''">
			and t1.recon_status = #{status}
		</if>
		<if test="startDate!=null">
			and t1.create_date &gt; #{startDate}
		</if>
		<if test="endDate!=null">
			and t1.create_date &lt; #{endDate}
		</if>
		<if test="userNames!=null">
			and t1.create_user in 
			<foreach collection="userNames" open="(" close=")" item="item" separator=",">
				#{item}
			</foreach>
		</if>
	</select>
	<select id="getSuppPurchReconByPage" parameterType="Map"
		resultMap="purchRecon">
		select t3.* from
		(select t2.*,rownum rn from
		(select t1.* from
		fam_purch_recon t1 where 1=1
		<if test="reconCode!=null and reconCode!=''">
			and t1.recon_code like #{reconCode}
		</if>
		<if test="startDate!=null">
			and t1.create_date &gt;= #{startDate}
		</if>
		<if test="endDate!=null">
			and t1.create_date &lt;= #{endDate}
		</if>
		<if test="status!=null and status!=''">
			and t1.recon_status = #{status}
		</if>
		 and t1.supp_No=#{suppNo}
		and t1.recon_Status <![CDATA[!=]]>'YBC' 
		order by
		t1.create_time desc) t2
		where rownum
		&lt;= #{page.to}) t3
		where t3.rn
		&gt; #{page.from}
	</select>

	<select id="getSuppPurchReconCount" parameterType="Map"
		resultType="Integer">
		select count(1) from fam_purch_recon t1 where 1=1
		<if test="reconCode!=null and reconCode!=''">
			and t1.recon_code like #{reconCode}
		</if>
		<if test="startDate!=null">
			and t1.create_date &gt; #{startDate}
		</if>
		<if test="endDate!=null">
			and t1.create_date &lt; #{endDate}
		</if>
		<if test="status!=null and status!=''">
			and t1.recon_status = #{status}
		</if>
		and t1.supp_No=#{suppNo}
		and t1.recon_Status <![CDATA[!=]]> 'YBC' 
	</select>
	<insert id="savePurchRecon" parameterType="com.faujor.entity.fam.PurchRecon">
		insert into
		fam_purch_recon tb (
		tb.id,tb.recon_code,create_date,tb.recon_status,tb.recon_status_desc,
		tb.supp_no,tb.supp_name,tb.start_date,tb.end_date,tb.plant_code,
		tb.plant_desc,tb.sum_amount,tb.create_user,tb.create_time,tb.modify_user,
		tb.modify_time,creater,modifier)
		values (
		#{id},#{reconCode},#{createDate},#{reconStatus},#{reconStatusDesc},
		#{suppNo},#{suppName},#{startDate},#{endDate},#{plantCode},
		#{plantDesc},#{sumAmount},#{createUser},#{createTime},#{modifyUser},
		#{modifyTime},#{creater},#{modifier})
	</insert>

	<update id="updatePurchRecon" parameterType="com.faujor.entity.fam.PurchRecon">
		update
		fam_purch_recon tb set
		tb.recon_status=#{reconStatus},tb.recon_status_desc=#{reconStatusDesc},tb.supp_no=#{suppNo},
		tb.supp_name=#{suppName},tb.start_date=#{startDate},tb.end_date=#{endDate},
		tb.plant_code=#{plantCode},
		tb.plant_desc=#{plantDesc},tb.sum_amount=#{sumAmount},
		tb.modify_user=#{modifyUser},
		tb.modify_time=#{modifyTime},modifier=#{modifier}
		where tb.recon_code
		=#{reconCode}
	</update>

	<delete id="deletePurchResonByCode" parameterType="String">
		delete from
		fam_purch_recon tb where tb.recon_code =#{reconCode}
	</delete>

	<select id="getPurchReconByCode" resultMap="purchRecon"
		parameterType="String">
		select * from fam_purch_recon tb where
		tb.recon_code=#{reconCode}
	</select>

	<update id="changeReconStatus" parameterType="Map">
		update
		fam_purch_recon tb set
		tb.recon_status=#{reconStatus},tb.recon_status_desc=#{reconStatusDesc}
		where tb.recon_code =#{reconCode}
	</update>

	<insert id="saveReconMate">
		insert into fam_purch_recon_mate tb (
		tb.id,tb.recon_code,tb.incoming_Date,tb.purch_Code,tb.mate_Code,tb.supp_scope,
		tb.mate_Desc,tb.unit_Code,tb.unit_Desc,tb.wareHouse,tb.incoming_Num,
		tb.tax_Price,tb.incoming_Price,tb.incoming_Total_Price,tb.incoming_Code,tb.inner_Delivery_Code,
		tb.order_Reason,tb.discount_Amount,tb.tax_Cost,tb.support_Price,tb.support_Cost,loan,row_num,
		supp_range,supp_range_desc,factory_price,incoming_freight,their_cdc
		)
		values (
		#{id},#{reconCode},#{incomingDate},#{purchCode},#{mateCode},#{suppScope},
		#{mateDesc},#{unitCode},#{unitDesc},#{wareHouse},#{incomingNum},
		#{taxPrice},#{incomingPrice},#{incomingTotalPrice},#{incomingCode},#{innerDeliveryCode},
		#{orderReason},#{discountAmount},#{taxCost},#{supportPrice},#{supportCost},#{loan},#{rowNum},
		#{suppRange},#{suppRangeDesc},#{factoryPrice},#{incomingFreight},#{theirCdc}
		)
	</insert>

	<delete id="delMateByReconCode" parameterType="String">
		delete from
		fam_purch_recon_mate tb where tb.recon_code=#{reconCode}
	</delete>

	<select id="getMateByReconCode" parameterType="String"
		resultMap="purchReconMate">
		select * from fam_purch_recon_mate tb where
		tb.recon_code=#{reconCode}
		order by incoming_Date
	</select>

	<insert id="saveReonDebit">
		insert into fam_purch_recon_debit tb (
		tb.id,tb.recon_code,tb.mate_Desc,tb.mate_Code,tb.amount,
		tb.debit_Reason,tb.remark,tb.att_file )
		values (
		#{id},#{reconCode},#{mateDesc},#{mateCode},#{amount},
		#{debitReason},#{remark},#{attFile})
	</insert>

	<delete id="delDebitByReconCode" parameterType="String">
		delete from
		fam_purch_recon_debit tb where tb.recon_code=#{reconCode}
	</delete>

	<select id="getDebitByReconCode" parameterType="String"
		resultMap="purchReconDebit">
		select * from fam_purch_recon_debit tb where
		tb.recon_code=#{reconCode}
	</select>
	<insert id="saveInvoce">
		insert into fam_purch_recon_debit tb (
		tb.id,tb.recon_code,tb.invoce_no,tb.total_money,tb.tax_money,tb.no_tax_money,
		tb.att_file )
		values (
		#{id},#{reconCode},#{invoceNo},#{totalMoney},#{taxMoney},#{noTaxMoney},
		#{attFile})
	</insert>
	<delete id="delInvoceByReconCode" parameterType="String">
		delete from
		fam_purch_recon_invoice tb where tb.recon_code=#{reconCode}
	</delete>

	<select id="getInvocesByReconCode" parameterType="String"
		resultMap="purchReconInvoce">
		select * from fam_purch_recon_invoice tb where
		tb.recon_code=#{reconCode}
	</select>

	<select id="getInvoiceByPage" parameterType="map" resultMap="purchReconInvoce">
		select * from fam_purch_recon_invoice tb where
		tb.recon_code=#{reconCode}
	</select>

	<insert id="batchSaveConfirmReconInfo" parameterType="list">
		insert all
		into fam_purch_recon_invoice (id, invoce_no, total_money,
		tax_money,no_tax_money,
		att_file, recon_code) values
		<foreach collection="list" item="item" index="index" open=""
			close=""
			separator="into fam_purch_recon_invoice (id, invoce_no, total_money,
			tax_money,no_tax_money, att_file, recon_code) values">
			(#{item.id}, #{item.invoceNo}, #{item.totalMoney},
			#{item.taxMoney},#{item.noTaxMoney}, #{item.attFile}, #{item.reconCode})
		</foreach>
		select 1 from dual
	</insert>
	
	<select id="getPurchMateByMap" parameterType="Map"
		resultMap="purchReconMate">
		select *
		  from fam_purch_recon_mate t1
		  left join fam_purch_recon t2
		    on t1.recon_code = t2.recon_code
		 <where>
	        	<if test="plantCode!=null and plantCode!=''">
		       		and t2.plant_code = #{plantCode}
	        	</if>
	        	<if test="suppNo!=null and suppNo!=''">
		         	and t2.supp_no = #{suppNo}
	        	</if>
		         <if test="startDate!=null">
		           and t1.incoming_Date &gt;=  #{startDate}
		         </if>
		       <if test="endDate!=null">
		       	   and t1.incoming_Date &lt;= #{endDate}
		       </if>
	     </where>
	     order by incoming_Date
	</select>
	
	<select id="getReconById" parameterType="String" resultMap="purchRecon">
		select * from fam_purch_recon tb where
		tb.id=#{id}
	</select>
</mapper>